
Hello

#include <stdio.h>
#include <omp.h>

int main() {
    #pragma omp parallel
    {
        printf("Hello World from thread %d\n", omp_get_thread_num());
    }
    return 0;
}



looptimer
#include <stdio.h>
#include <omp.h>

int main() {
    int n = 10000000;  // large n to see time difference
    long long serial_sum = 0, parallel_sum = 0;
    double start, end;

    // Serial computation
    start = omp_get_wtime();
    for (int i = 1; i <= n; i++) {
        serial_sum += i * i;
    }
    end = omp_get_wtime();
    printf("Serial sum of squares (1..%d) = %lld\n", n, serial_sum);
    printf("Serial time: %f seconds\n\n", end - start);

    // Parallel computation with reduction
    start = omp_get_wtime();
    #pragma omp parallel for reduction(+:parallel_sum)
    for (int i = 1; i <= n; i++) {
        parallel_sum += i * i;
    }
    end = omp_get_wtime();
    printf("Parallel sum of squares (1..%d) = %lld\n", n, parallel_sum);
    printf("Parallel time: %f seconds\n", end - start);

    return 0;
}



private

#include <stdio.h>
#include <omp.h>

int main() {
    int i, n = 6;

    #pragma omp parallel for private(i)
    for (i = 0; i < n; i++) {
        printf("Thread %d executing iteration %d\n",
               omp_get_thread_num(), i);
    }

    return 0;
}


 firstprivate

#include <stdio.h>
#include <omp.h>

int main() {
    int x = 10;

    #pragma omp parallel firstprivate(x)
    {
        x += omp_get_thread_num();
        printf("Thread %d has x = %d\n", omp_get_thread_num(), x);
    }

    return 0;
}


 Last private

#include <stdio.h>
#include <omp.h>

int main() {
    int i, n = 6, val = 0;

    #pragma omp parallel for lastprivate(val)
    for (i = 1; i <= n; i++) {
        val = i;
        printf("Thread %d processing i = %d\n",
               omp_get_thread_num(), i);
    }

    printf("Value of val after loop = %d\n", val);
    return 0;
}




critical

#include <stdio.h>
#include <omp.h>

int main() {
    int counter = 0;

    #pragma omp parallel
    {
        for (int i = 0; i < 3; i++) {
            #pragma omp critical
            {
                counter++;
                printf("Thread %d increments counter to %d\n",
                       omp_get_thread_num(), counter);
            }
        }
    }

    printf("Final counter value = %d\n", counter);
    return 0;
}
